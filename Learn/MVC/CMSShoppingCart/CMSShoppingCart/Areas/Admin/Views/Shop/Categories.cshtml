@model IEnumerable<CMSShoppingCart.Models.ViewModels.Shop.CategoryVM>

@{
    ViewBag.Title = "Categories";
}

<h2>Categories</h2>

<div class="new-cat">
    <input type="text" id="newcatname" />
    <p>
        <a href="#" id="newcata">Add New Category</a>
        <span class="ajax-text">
            <img src="~/Content/img/ajax-loader.gif" />
        </span>
    </p>
</div>

@if (!Model.Any())
{
    <h1 class="text-center">There are no categories.</h1>
}
else
{
    <table class="table sorting categories" id="categories">
        <tr class="home">
            <th>
                @Html.DisplayNameFor(model => model.Name)
            </th>
            <th></th>
        </tr>

        @foreach (var item in Model)
        {
            <tr id="id_@item.Id">
                <div class="ajaxdivtd"></div>
                <td>
                    @Html.EditorFor(modelItem => item.Name, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                </td>
                <td>
                    @Html.ActionLink("Delete", "DeleteCategory", new { id = item.Id }, new { @class = "delete" })
                </td>
            </tr>
        }

    </table>
}
@section Scripts {
    <script>
        $(function () {
            var tableName = "table#categories";
            var filter = tableName + " tbody";

            var newCatA = $("a#newcata");
            var newCatTextInput = $("#newcatname");
            var ajaxText = $("span.ajax-text");
            var table = $(filter);

            newCatTextInput.keyup(function (e) {
                if (e.keyCode === 13) {
                    newCatA.click();
                }
            });

            newCatA.click(function (e) {
                e.preventDefault();

                var catName = newCatTextInput.val();

                if (catName.length < 2) {
                    alert("Category name must be at least 2 characters long.");
                    return false;
                }

                ajaxText.show();

                var url = "/admin/shop/AddNewCategory";

                $.post(url, { catName: catName }, function (data) {
                    var response = data.trim();

                    if (response === 'titletaken') {
                        displayAjax("alert-danger", "That title is taken.");
                        return false;
                    } else {

                        if (!$(tableName).length) {
                            location.reload();
                        } else {
                            displayAjax(ajaxText, "alert-success", "Category  has been added.");
                            newCatTextInput.val("");

                            var toAppend = $(filter + " tr:last").clone();
                            toAppend.attr("id", "id_" + data);
                            toAppend.find("#item_Name").val(catName);
                            toAppend.find("a.delete").attr("href", "/adming/shop/DeleteCategory/" + data);
                            table.append(toAppend);
                            table.sortable("refresh");
                        }
                    }
                });
            });

            function displayAjax(textContainer, alertClass, msg) {
                textContainer.html(getAjaxText(alertClass, msg));
                setAjaxTimeout(textContainer);
            }

            function setAjaxTimeout(textContainer) {
                setTimeout(function () {
                    textContainer.fadeOut("fast", function () {
                        textContainer.html("img src='/Content/img/ajax-loader.gif' />")
                    });
                }, 2000);
            }

            function getAjaxText(alertClass, msg) {
                return "<span class='alert " + alertClass + "'>" + msg + "</span>";
            }

            // Sortable table
            $(filter).sortable({
                items: "tr:not(.home)",
                placeholder: "ui-state-highlight",
                update: function () {
                    var ids = $(filter).sortable("serialize");
                    //console.log(typeof (ids));
                    var url = "/admin/shop/ReorderCategories";
                    $.post(url, ids, function (data) {
                        
                    });
                }
            });

            // Confirm page deletion
            $("a.delete").click(function () {
                if (!confirm("Confirm page deletion?")) {
                    return false;
                }
            });

            // Edit category name on double-click
            var origValue;
            var catFilter = "table#categories input.text-box";
            $(catFilter).dblclick(function () {
                origValue = $(this).val();
                $(this).attr("readonly", false);
            });

            $(catFilter).keyup(function (e) {
                if (e.keyCode === 13) {
                    $(this).blur();
                }
            });

            $(catFilter).blur(function () {
                var $this = $(this);
                var ajaxdiv = $this.parent().find(".ajaxdivtd");
                var newCatName = $this.val();
                var id = $this.parent().parent().attr("id").substring(3);
                var url = "/admin/shop/RenameCategory";

                if (newCatName.length < 2) {
                    alert("Category name must be at least 2 characters long.");
                    $this.attr("readonly", true);
                    return false;
                }

                $.post(url, { newCatName: newCatName, id: id }, function (data) {
                    var response = data.trim();

                    if (response === "titletaken") {
                        $this.val(origValue);
                        ajaxdiv.html(getAjaxText("alert-danger", "That title is taken"));
                    } else {
                        ajaxdiv.html(getAjaxText("alert-success", "The category name has been changed"));
                    }

                    setAjaxTimeout(ajaxdiv);

                }).done(function () {
                    $this.attr("readonly", true);
                });
            });
        });
    </script>
}

